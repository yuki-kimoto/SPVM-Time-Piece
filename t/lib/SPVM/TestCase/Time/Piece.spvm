class TestCase::Time::Piece {
  
  use Sys;
  use Time::Piece;
  use Format;
  
  static method test : int () {
    
    return 1;
  }
  
  static method localtime : int () {
    
    {
      my $tp = Time::Piece->localtime;
    }
    
    {
      my $tp = Time::Piece->localtime(Sys->time);
    }
    
    return 1;
  }
  
  static method gmtime : int () {
    
    {
      my $tp = Time::Piece->gmtime;
    }
    
    {
      my $tp = Time::Piece->gmtime(Sys->time);
    }
    
    return 1;
  }
  
  static method accessors : int () {
    {
      my $tp = Time::Piece->strptime("2022-12-13 10:11:56", "%Y-%m-%d %H:%M:%S");
      
      unless ($tp->sec == 56) {
        return 0;
      }
      
      unless ($tp->min == 11) {
        return 0;
      }
      
      unless ($tp->hour == 10) {
        return 0;
      }
      
      unless ($tp->mday == 13) {
        return 0;
      }
      
      unless ($tp->mon == 12) {
        return 0;
      }
      
      unless ($tp->_mon == 11) {
        return 0;
      }
      
      unless ($tp->monname eq "Dec") {
        return 0;
      }
      
      unless ($tp->monname(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]) eq "12") {
        return 0;
      }
      
      unless ($tp->month eq "Dec") {
        return 0;
      }
      
      unless ($tp->month(["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"]) eq "12") {
        return 0;
      }
      
      unless ($tp->fullmonth eq "December") {
        return 0;
      }
      
      unless ($tp->year == 2022) {
        return 0;
      }
      
      unless ($tp->_year == 122) {
        return 0;
      }
      
      unless ($tp->yy == 22) {
        return 0;
      }
      
      unless ($tp->wday == 3) {
        return 0;
      }
      
      unless ($tp->_wday == 2) {
        return 0;
      }
      
      unless ($tp->day_of_week == 2) {
        return 0;
      }
      
      unless ($tp->wdayname eq "Tue") {
        return 0;
      }
      
      unless ($tp->wdayname(["0", "1", "2", "3", "4", "5", "6"])  eq "2") {
        return 0;
      }
      
      unless ($tp->day eq "Tue") {
        return 0;
      }
      
      unless ($tp->day(["0", "1", "2", "3", "4", "5", "6"])  eq "2") {
        return 0;
      }
      
      unless ($tp->fullday eq "Tuesday") {
        return 0;
      }
      
      unless ($tp->yday == 346) {
        return 0;
      }
      
      unless ($tp->day_of_year == 346) {
        return 0;
      }
      
      unless ($tp->isdst == 0) {
        return 0;
      }
      
      unless ($tp->daylight_savings == 0) {
        return 0;
      }
      
      unless ($tp->hms eq "10:11:56") {
        return 0;
      }
      
      unless ($tp->hms(".") eq "10.11.56") {
        return 0;
      }
      
      unless ($tp->time eq "10:11:56") {
        return 0;
      }
      
      unless ($tp->time(".") eq "10.11.56") {
        return 0;
      }
      
      unless ($tp->ymd eq "2022-12-13") {
        return 0;
      }
      
      unless ($tp->date eq "2022-12-13") {
        return 0;
      }
      
      unless ($tp->mdy eq "12-13-2022") {
        return 0;
      }
      
      unless ($tp->mdy("/") eq "12/13/2022") {
        return 0;
      }
      
      unless ($tp->dmy eq "13-12-2022") {
        return 0;
      }
      
      unless ($tp->dmy(".") eq "13.12.2022") {
        return 0;
      }
      
      unless ($tp->datetime eq "2022-12-13T10:11:56") {
        return 0;
      }
      
      unless ($tp->cdate eq "Tue Dec 13 10:11:56 2022") {
        return 0;
      }
      
      unless ($tp->epoch == 1670926316) {
        return 0;
      }
      
      unless ($tp->tzoffset->seconds == 0) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method tzoffset : int () {
    
    {
      my $tp = Time::Piece->gmtime;
      
      unless ($tp->tzoffset->seconds == 0) {
        return 0;
      }
    }
    
    {
      my $tp = Time::Piece->localtime;
      
      my $tzoffset = $tp->tzoffset;
      
      warn "[Test Output]tzoffset:" . $tzoffset->hours;
    }
    
    return 1;
  }
  
  static method julian_day : int () {
    
    {
      my $tp = Time::Piece->gmtime;
      
      my $julian_day = $tp->julian_day;
      
      warn "[Test Output]julian_day:" . Format->sprintf("%.10f", [(object)$julian_day]);
    }
    
    return 1;
  }
  
  static method mjd : int () {
    
    {
      my $tp = Time::Piece->gmtime;
      
      my $mjd = $tp->mjd;
      
      warn "[Test Output]mjd:" . Format->sprintf("%.10f", [(object)$mjd]);
    }
    
    return 1;
  }
  
  static method week : int () {
    
    {
      my $tp = Time::Piece->gmtime;
      
      my $week = $tp->week;
      
      warn "[Test Output]week:$week";
    }
    
    return 1;
  }
  
  static method is_leap_year : int () {
    
    {
      my $tp = Time::Piece->gmtime;
      
      my $is_leap_year = $tp->is_leap_year;
      
      warn "[Test Output]week:$is_leap_year";
    }
    
    return 1;
  }
  
  static method month_last_day : int () {
    
    {
      my $tp = Time::Piece->gmtime;
      
      my $month_last_day = $tp->month_last_day;
      
      warn "[Test Output]month_last_day:$month_last_day";
    }
    
    return 1;
  }
  
  static method strftime : int () {
    {
      my $tp = Time::Piece->strptime("2022-12-13 10:11:56", "%Y-%m-%d %H:%M:%S");
      
      my $output = $tp->strftime("%Y-%m-%d %H:%M:%S");
      
      unless ($output eq "2022-12-13 10:11:56") {
        return 0;
      }
      
    }
    
    {
      my $tp = Time::Piece->gmtime;
      
      my $strftime = $tp->strftime("%a %A %b %B %c %C %d %D %e %F %G %g %h %H ") . $tp->strftime("%I %j %k %l %m %M %n %p %P %r %R %s %S %t %T %u %U ") . $tp->strftime("%V %w %W %x %X %y %Y %z %Z %+ %Ec, %EC, %Ex ") . $tp->strftime("%EX, %Ey, %EY, %Od, %Oe, %OH, %OI, %Om, %OM, %OS, %Ou, %OU, %OV, %Ow, %OW, %Oy %%");
      
      warn "[Test Output]strftime:$strftime";
    }
    
    {
      my $tp = Time::Piece->gmtime;
      
      my $strftime = $tp->strftime;
      
      warn "[Test Output]strftime:$strftime";
    }
    
    {
      my $tp = Time::Piece->localtime;
      
      my $strftime = $tp->strftime;
      
      warn "[Test Output]strftime:$strftime";
    }
    
    return 1;
  }
  
  static method strptime : int () {
    {
      my $tp = Time::Piece->strptime("2022-12-13 10:11:56", "%Y-%m-%d %H:%M:%S");
      
      unless ($tp->year == 2022) {
        return 0;
      }
      
      unless ($tp->mon == 12) {
        return 0;
      }
      
      unless ($tp->mday == 13) {
        return 0;
      }
      
      unless ($tp->hour == 10) {
        return 0;
      }
      
      unless ($tp->min == 11) {
        return 0;
      }
      
      unless ($tp->sec == 56) {
        return 0;
      }
      
    }
    
    return 1;
  }
  
  static method localtime_tp : int () {
    {
      my $tp = Time::Piece->strptime("2022-12-13 10:11:56", "%Y-%m-%d %H:%M:%S");
      
      my $tp_localtime = Time::Piece->localtime_tp($tp);
      
      warn $tp_localtime->strftime;
      
      unless (Fn->contains($tp_localtime->strftime, "10:11:56")) {
        return 0;
      }
      
      warn "[Test Output]localtime_tp:\$tp->epoch:" . $tp->epoch . ":\$tp_localtime->epoch:" . $tp_localtime->epoch;
    }
    
    return 1;
  }
}
