# Copyright (c) 2023 Yuki Kimoto
# MIT License

class Time::Seconds {
  allow Time::Piece;
  
  use StringBuffer;
  
  # Fields
  has seconds : ro long;
  
  # Class Methods
  static method new : Time::Seconds ($second : long = 0) {
    
    my $self = new Time::Seconds;
    
    $self->{seconds} = $second;
    
    return $self;
  }
  
  static method ONE_MINUTE : long () { return 60; }
  
  static method ONE_HOUR : long () { return 3_600; }
  
  static method ONE_DAY : long () { return 86_400; }
  
  static method ONE_WEEK : long () { return 604_800; }
  
  static method ONE_MONTH : long () { return 2_629_744; } # ONE_YEAR / 12
  
  static method ONE_YEAR : long () { return 31_556_930; } # 365.24225 days
  
  static method ONE_FINANCIAL_MONTH : long () { return 2_592_000; } # 30 days
  
  static method LEAP_YEAR : long () { return 31_622_400; } # 366 * ONE_DAY
  
  static method NON_LEAP_YEAR : long () { return 31_536_000; } # 365 * ONE_DAY
  
  # Instance Methods
  method add : Time::Seconds ($seconds : long) {
    
    my $new_seconds = $self->{seconds} + $seconds;
    
    return Time::Seconds->new($new_seconds);
  }
  
  method add_to : void ($seconds : long) {
    $self->{seconds} += $seconds;
  }
  
  method subtract : Time::Seconds ($seconds : long) {
    
    my $new_seconds = $self->{seconds} - $seconds;
    
    return Time::Seconds->new($new_seconds);
  }
  
  method subtract_from : void ($seconds : long) {
    $self->{seconds} -= $seconds;
  }
  
  method minutes : double () {
    return $self->{seconds} / 60.0;
  }
  
  method hours : double () {
    return $self->minutes / 60.0;
  }
   
  method days : double () {
    return $self->hours / 24.0;
  }
   
  method weeks : double () {
    return $self->days / 7.0;
  }
   
  method months : double () {
    return $self->days / 30.4368541;
  }
   
  method financial_months : double () {
    return $self->days / 30.0;
  }
  
  method years : double () {
    return $self->days / 365.24225;
  }
  
  method clone : Time::Seconds () {
    return Time::Seconds->new($self->{seconds});
  }
  
  method pretty : string () {
    my $seconds = $self->{seconds};
    
    my $buffer = StringBuffer->new;
    
    if ($seconds < 0) {
      $seconds = -$seconds;
      $buffer->push("minus ");
    }
    if ($seconds >= &ONE_MINUTE) {
      if ($seconds >= &ONE_HOUR) {
        if ($seconds >= &ONE_DAY) {
          my $days_floor = (int)$self->days;
          $buffer->push($days_floor);
          unless ($days_floor == 1) {
            $buffer->push("s");
          }
          $buffer->push(" ,");
          
          $seconds -= ($days_floor * &ONE_DAY);
        }
        my $hours_floor = (int)$self->hours;
        $buffer->push($hours_floor);
        unless ($hours_floor == 1) {
          $buffer->push("s");
        }
        $buffer->push(" ,");
        $seconds -= ($hours_floor * &ONE_HOUR);
      }
      my $mins_floor = (int)$self->minutes;
      $buffer->push($mins_floor);
      unless ($mins_floor == 1) {
        $buffer->push("s");
      }
      $buffer->push(" ,");
      $seconds -= ($mins_floor * &ONE_MINUTE);
    }
    
    $buffer->push($seconds);
    unless ($seconds == 1) {
      $buffer->push("s");
    }
    
    my $string = $buffer->to_string;
    
    return $string;
  }
  
}
